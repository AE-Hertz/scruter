<!-- Custom Search Bar -->
<div id="search-bar" class="container my-3 gsap-main">
  <form id="search-form" method="GET" action="<%= searchAction %>">
    <div class="row justify-content-center align-items-center gx-2"> <!-- Increased spacing with gx-2 -->
      <!-- Search Input -->
      <div class="col-12 col-md-auto mb-2 mb-md-0">
        <input type="text" class="form-control" id="search-input" name="query" placeholder="Search"
          value="<%= query %>">
      </div>

      <!-- Inline Dropdown for Search Action -->
      <div class="col-6 col-md-auto mb-2 mb-md-0">
        <select class="form-select" id="search-action" name="type">
          <option value="food" <%=activeLink==='food' ? 'selected' : '' %>>Food</option>
          <option value="house" <%=activeLink==='house' ? 'selected' : '' %>>House</option>
          <option value="market" <%=activeLink==='market' ? 'selected' : '' %>>Market</option>
        </select>
      </div>

      <!-- sorting dropdown -->
      <div class="col-6 col-md-auto mb-2 mb-md-0">
        <select class="form-select" id="sort-by-price" name="sort">
          <!-- The JavaScript will populate these options -->
        </select>
      </div>

      <!-- Search Button -->
      <div class="col-12 col-md-auto">
        <button class="btn btn-dark text-light w-100" id="search-button" type="submit">Search</button>
      </div>
    </div>
    <div id="validation-message" class="text-danger mt-2 text-center" style="display: none;">
      Please enter a search term or select a sort option.
    </div>
  </form>
</div>

<!-- JavaScript to Update Form Action, Validate Input, and Handle Sorting -->
<script>
  document.addEventListener("DOMContentLoaded", function () {
  const searchForm = document.getElementById('search-form');
  const searchInput = document.getElementById('search-input');
  const searchAction = document.getElementById('search-action');
  const sortSelect = document.getElementById('sort-by-price');
  const validationMessage = document.getElementById('validation-message');
  const cards = document.querySelectorAll('.card');

  // Update the sort dropdown HTML to include name sorting options
  sortSelect.innerHTML = `
    <option value="">Sort by...</option>
    <optgroup label="Price">
      <option value="price_asc">Price - Low to High</option>
      <option value="price_desc">Price - High to Low</option>
    </optgroup>
    <optgroup label="Name">
      <option value="name_asc">Name - A to Z</option>
      <option value="name_desc">Name - Z to A</option>
    </optgroup>
  `;

  function filterAndSortCards() {
    const query = searchInput.value.toLowerCase().trim();
    const sortOption = sortSelect.value;

    // Convert NodeList to Array and filter
    let filteredCards = Array.from(cards).filter(card => {
      const title = card.querySelector('.card-title')?.textContent.toLowerCase() || '';
      return title.includes(query);
    });

    // Sort cards based on selected option
    if (sortOption) {
      filteredCards.sort((a, b) => {
        const titleA = a.querySelector('.card-title')?.textContent.toLowerCase() || '';
        const titleB = b.querySelector('.card-title')?.textContent.toLowerCase() || '';
        const priceA = parseFloat(a.dataset.price) || 0;
        const priceB = parseFloat(b.dataset.price) || 0;

        switch (sortOption) {
          case 'price_asc':
            return priceA - priceB;
          case 'price_desc':
            return priceB - priceA;
          case 'name_asc':
            return titleA.localeCompare(titleB);
          case 'name_desc':
            return titleB.localeCompare(titleA);
          default:
            return 0;
        }
      });
    }

    // Update visibility using a document fragment for better performance
    const container = cards[0].parentElement.parentElement;
    const fragment = document.createDocumentFragment();
    
    // Hide all cards first
    cards.forEach(card => {
      const wrapper = card.parentElement;
      wrapper.style.display = 'none';
    });

    // Show and reorder filtered cards
    filteredCards.forEach(card => {
      const wrapper = card.parentElement;
      wrapper.style.display = 'block';
      fragment.appendChild(wrapper);
    });

    container.appendChild(fragment);
  }

  searchInput.addEventListener('input', filterAndSortCards);
  sortSelect.addEventListener('change', filterAndSortCards);

  // Update form action based on the selected search action
  searchAction.addEventListener('change', function () {
    const activeLink = this.value;
    searchForm.action = `/${activeLink}?type=${activeLink}`;
  });

    // Validate input before submitting the form
  searchForm.addEventListener('submit', function (event) {
    const queryInput = searchInput.value.trim();
    
    if (queryInput === '' && !sortSelect.value) {
      event.preventDefault();
      validationMessage.style.display = 'block';
      searchInput.classList.add('is-invalid');
    } else {
      validationMessage.style.display = 'none';
      searchInput.classList.remove('is-invalid');
    }
  });
});
</script>
