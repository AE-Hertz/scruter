<!-- Custom Search Bar -->
<div id="search-bar" class="container my-3 gsap-main">
  <form id="search-form" method="GET" action="<%= searchAction %>">
    <div class="row justify-content-center align-items-center gx-2"> <!-- Increased spacing with gx-2 -->
      <!-- Search Input -->
      <div class="col-12 col-md-auto mb-2 mb-md-0">
        <input type="text" class="form-control" id="search-input" name="query" placeholder="Search"
          value="<%= query %>">
      </div>

      <!-- Inline Dropdown for Search Action -->
      <div class="col-6 col-md-auto mb-2 mb-md-0">
        <select class="form-select" id="search-action" name="type">
          <option value="food" <%=activeLink==='food' ? 'selected' : '' %>>Food</option>
          <option value="house" <%=activeLink==='house' ? 'selected' : '' %>>House</option>
          <option value="market" <%=activeLink==='market' ? 'selected' : '' %>>Market</option>
        </select>
      </div>

      <!-- sorting dropdown -->
      <div class="col-6 col-md-auto mb-2 mb-md-0">
        <select class="form-select" id="sort-by-price" name="sort">
          <!-- The JavaScript will populate these options -->
        </select>
      </div>

      <!-- Search Button -->
      <div class="col-12 col-md-auto">
        <button class="btn btn-dark text-light w-100" id="search-button" type="submit">Search</button>
      </div>
    </div>
    <div id="validation-message" class="text-danger mt-2 text-center" style="display: none;">
      Please enter a search term or select a sort option.
    </div>
  </form>
</div>

<!-- JavaScript to Update Form Action, Validate Input, and Handle Sorting -->
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const searchForm = document.getElementById('search-form');
    const searchInput = document.getElementById('search-input');
    const searchAction = document.getElementById('search-action');
    const sortSelect = document.getElementById('sort-by-price');
    const validationMessage = document.getElementById('validation-message');
    const cards = document.querySelectorAll('.card');

  // Update the sort dropdown HTML to include name sorting options
    sortSelect.innerHTML = `
    <option value="">Sort by...</option>
    <optgroup label="Price">
      <option value="price_asc">Price - Low to High</option>
      <option value="price_desc">Price - High to Low</option>
    </optgroup>
    <optgroup label="Name">
      <option value="name_asc">Name - A to Z</option>
      <option value="name_desc">Name - Z to A</option>
    </optgroup>
  `;

    // Helper functions
    const getCardTitle = (card) => {
      const titleElement = card.querySelector('.card-title');
      return titleElement ? titleElement.textContent.toLowerCase() : '';
    };

    const getCardPrice = (card) => {
      // Assuming price is coming from class 'card-price' refer latest commits
      const priceElement = card.querySelector('.card-price');
      if (!priceElement) return 0;

      const priceText = priceElement.textContent.replace(/[^0-9.-]+/g, '');
      const price = parseFloat(priceText);
      return isNaN(price) ? 0 : price;
    };

    const sortFunctions = {
      price_asc: (a, b) => getCardPrice(a) - getCardPrice(b),
      price_desc: (a, b) => getCardPrice(b) - getCardPrice(a),
      name_asc: (a, b) => getCardTitle(a).localeCompare(getCardTitle(b)),
      name_desc: (a, b) => getCardTitle(b).localeCompare(getCardTitle(a))
    };

    function filterAndSortCards() {
      const query = searchInput.value.toLowerCase().trim();
      const sortOption = sortSelect.value;

      // Convert NodeList to Array and filter
      let filteredCards = Array.from(cards);

      if (query) {
        filteredCards = filteredCards.filter(card => {
          const title = getCardTitle(card);
          return title.includes(query);
        });
      }

      if (sortOption && sortFunctions[sortOption]) {
        filteredCards.sort(sortFunctions[sortOption]);
      }

      const container = cards[0].parentElement.parentElement;
      const fragment = document.createDocumentFragment();

      cards.forEach(card => {
        const wrapper = card.parentElement;
        if (wrapper) {
          wrapper.style.display = 'none';
        }
      });

      filteredCards.forEach(card => {
        const wrapper = card.parentElement;
        if (wrapper) {
          wrapper.style.display = 'block';
          fragment.appendChild(wrapper);
        }
      });

      container.appendChild(fragment);
    }

    searchInput.addEventListener('input', filterAndSortCards);
    sortSelect.addEventListener('change', filterAndSortCards);

    searchAction.addEventListener('change', function () {
      const activeLink = this.value;
      searchForm.action = `/${activeLink}?type=${activeLink}`;
    });

    searchForm.addEventListener('submit', function (event) {
      const queryInput = searchInput.value.trim();

      if (queryInput === '' && !sortSelect.value) {
        event.preventDefault();
        validationMessage.style.display = 'block';
        searchInput.classList.add('is-invalid');
      } else {
        validationMessage.style.display = 'none';
        searchInput.classList.remove('is-invalid');
      }
    });
  });
</script>